@page "/"
@using Blazor.Shared
@rendermode @(new InteractiveWebAssemblyRenderMode(false))  
@inject NavigationManager NavigationManager 

<h3>Welcome to the TicTacToe Lobby</h3>

@if(currentRoom is null)
{
    <input @bind="playerName" placeholder="Your name" />
    <input @bind="currentRoomName" placeholder="Room name" />
    <button @onclick="CreateRoom">Create</button>
@* {  if room is not null, show the room details } 
    <h3>Room</h3>
    <p>Room name: @currentRoom.RoomName</p>
    <p>Players: @string.Join(", ", currentRoom.Players)</p>
    <button @onclick="() => currentRoom = null">Leave</button>
}) *@

<h3>Rooms: </h3>
<ul>
    @foreach (var room in rooms)
    {
        <li>@room.RoomName <button @onclick="() => JoinRoom(room.RoomId)"> 
            Join 
        </button></li>
    }
    </ul>
}
else
{
    <CascadingValue Value="hubConnection">
        <Room CurrentRoom="currentRoom"/>
    </CascadingValue>
}


@code {
    private HubConnection? hubConnection;
    private string playerName = string.Empty;
    private string currentRoomName = string.Empty;
    private GameRoom? currentRoom;
    private List<GameRoom> rooms = new();  

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<List<GameRoom>>("Rooms", (roomList) =>
        {
            Console.WriteLine($"We got rooms! Count: {roomList.Count}");
            rooms = roomList;
            StateHasChanged();
        }); 

        await hubConnection.StartAsync();
    }

    private async Task CreateRoom()
    {
        if (hubConnection is null)
            return;

        currentRoom = await hubConnection.InvokeAsync<GameRoom>(
                "CreateRoom", currentRoomName, playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (hubConnection is null)
            return;

        var joinedRoom = await hubConnection.InvokeAsync<GameRoom>(
                "JoinRoom", roomId, playerName);

        if (joinedRoom is not null)
        {
            currentRoom = joinedRoom;
        }
        else 
        {
            Console.WriteLine("Failed to join room, room might be full or it does not exist");
        }
    }
}